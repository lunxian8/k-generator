package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.demo.common.utils.Underline2Camel;
import org.apache.commons.lang3.StringUtils;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;




/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

     /**
      * Delete boolean.
      *
      * @param ${classname} the ${classname}
      * @return the boolean
      */
     @RequestMapping(value = "/delete" )
     public boolean delete(@RequestBody ${className}Entity ${classname}){
          return ${classname}Service.deleteById(${classname});
     }


     /**
      * Insert or update boolean.
      *
      * @param ${classname} the ${classname}
      * @return the boolean
      */
     @RequestMapping(value = "/insertOrUpdate" )
     public boolean insertOrUpdate(@RequestBody ${className}Entity ${classname}){
          return ${classname}Service.insertOrUpdate(${classname});
     }

     /**
      * Get ${classname}.
      *
      * @param ${className} the ${classname}
      * @return the ${classname}
      */
     @RequestMapping(value = "/get" )
     public ${className}Entity get(@RequestBody ${className}Entity ${className}){
          return ${classname}Service.selectById(${className});
     }

     /**
      * Get List ${classname}.
      *
      * @param ${className} the ${classname}.
      * @return the List
      */
     @RequestMapping(value = "/getList" )
     public List<${className}Entity> getList(@RequestBody ${className}Entity ${className}) {
          return  ${classname}Service.selectList(new EntityWrapper<>(${className}));
     }


     /**
      * Get Page ${classname}
      *
      * @param page the ${classname}
      * @return the Page
      */
     @RequestMapping(value = "/get${classname}ByPage" )
     public Page<${className}Entity> get${classname}ByPage(@RequestBody Page<${className}Entity> page,String key, String column){
          if (com.baomidou.mybatisplus.toolkit.StringUtils.checkValNull(page.getOrderByField())) {
               //page.setOrderByField("update_date");
               page.setAsc(false);
          }
          EntityWrapper<${className}Entity> ew=new EntityWrapper<${className}Entity>();
          if(StringUtils.isNotEmpty(key)&&StringUtils.isNotEmpty(column)){
               String[]cols=column.split(",");
               int i=0;
               for(String col:cols){
                    String ul_col=camel2Underline(col);
                    if(i==0){
                         ew.andNew(ul_col+" LIKE {0}","%"+key+"%");
                    }else{
                         ew.or(ul_col+" LIKE {0}","%"+key+"%");
                    }
                    i++;
               }
          }else{
               ew.setEntity(new ${className}Entity());
          }
          return  ${classname}Service.selectPage(page,ew);
     }
     /**
     * 驼峰法转下划线
     * @param line 源字符串
     * @return 转换后的字符串
     */
     public static String camel2Underline(String line){
          if(line==null||"".equals(line)){
               return "";
          }
          line=String.valueOf(line.charAt(0)).toUpperCase().concat(line.substring(1));
          StringBuffer sb=new StringBuffer();
          Pattern pattern=Pattern.compile("[A-Z]([a-z\\d]+)?");
          Matcher matcher=pattern.matcher(line);
          while(matcher.find()){
               String word=matcher.group();
               sb.append(word.toUpperCase());
               sb.append(matcher.end()==line.length()?"":"_");
          }
          return sb.toString().toLowerCase();
     }
}
